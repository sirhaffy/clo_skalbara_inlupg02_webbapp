name: Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: sirhaffy/clo-fresva-app
  AWS_REGION: eu-north-1

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build application
      run: yarn build

    - name: Test Docker build
      run: docker build -t test-image .

  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get version info
      id: version
      run: |
        # Create version from git commit
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        VERSION="${{ github.ref_name }}-${SHORT_SHA}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
        labels: |
          org.opencontainers.image.title=CLO FreSva App
          org.opencontainers.image.description=Docker Swarm Test Application
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          com.centurylinklabs.watchtower.enable=true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update Parameter Store with new version
      run: |
        aws ssm put-parameter \
          --name "/clofresva_skalbara_upg02/app/docker_image_version" \
          --value "${{ steps.version.outputs.version }}" \
          --type "String" \
          --overwrite

    - name: Deployment summary
      run: |
        echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Watchtower:** Will auto-update containers within 5 minutes" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check:** Monitor at https://your-domain.com/api/health" >> $GITHUB_STEP_SUMMARY